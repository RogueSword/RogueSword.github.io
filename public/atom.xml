<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RogueSword</title>
  
  <subtitle>Just the sunshine, coding time</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-19T06:33:35.659Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Roy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019面试资料整理</title>
    <link href="http://yoursite.com/2019/09/19/2019%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2019/09/19/2019面试资料整理/</id>
    <published>2019-09-19T06:31:50.000Z</published>
    <updated>2019-09-19T06:33:35.659Z</updated>
    
    <content type="html"><![CDATA[<h3 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h3><ul><li><a href="https://mp.weixin.qq.com/s/TpoKxF4gMi4pSML--W0X2g" target="_blank" rel="noopener">五分钟面试</a></li><li><a href="https://mp.weixin.qq.com/s/PDMt08JJCzJtHC9bRBPg4w" target="_blank" rel="noopener">学习路线以及方向的总结</a></li></ul><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><ul><li><a href="https://segmentfault.com/a/1190000008594792" target="_blank" rel="noopener">关于隐式转换</a></li><li><a href="https://github.com/gauseen/blog/issues/6" target="_blank" rel="noopener">宏任务与微任务</a></li></ul><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><ul><li><a href="https://blog.csdn.net/mqingo/article/details/86031260" target="_blank" rel="noopener">vue生命周期</a></li><li><a href="https://blog.csdn.net/sinat_17775997/article/details/82756496" target="_blank" rel="noopener">Vue 面试中常问知识点整理</a></li><li><a href="https://juejin.im/post/5d41eec26fb9a06ae439d29f?" target="_blank" rel="noopener">面试必备的13道可以举一反三的Vue面试题</a></li><li><a href="https://mp.weixin.qq.com/s/w4onfmE5FWc2zqP6mtYc3g" target="_blank" rel="noopener">「从源码中学习」面试官都不知道的Vue题目答案</a></li><li><a href="https://juejin.im/post/5d59f2a451882549be53b170?utm_source=gold_browser_extension#heading-2" target="_blank" rel="noopener">30 道 Vue 面试题，内含详细讲解（涵盖入门到精通，自测 Vue 掌握程度）</a></li><li><a href="https://mp.weixin.qq.com/s/cVYtYWOB2mie-bjZmSw9AQ" target="_blank" rel="noopener">Vue.js最佳实践（五招让你成为Vue.js大师</a></li><li><a href="https://www.jianshu.com/p/ce8ca875c337" target="_blank" rel="noopener">vm.$attrs 【Vue 2.4.0新增inheritAttrs，attrs详解】</a></li><li><a href="https://juejin.im/post/5ad6182df265da23906c8627" target="_blank" rel="noopener">面试官：你了解 vue 的diff算法吗？</a></li><li><a href="https://juejin.im/post/5d48f3b7e51d4561e224a2c8?utm_source=gold_browser_extension" target="_blank" rel="noopener">Vuejs建议和最佳实践</a></li></ul><h3 id="webpack-配置"><a href="#webpack-配置" class="headerlink" title="webpack 配置"></a>webpack 配置</h3><ul><li><a href="https://www.jianshu.com/p/bfc7e7329cff" target="_blank" rel="noopener">eslint 配置</a></li><li><a href="https://www.cnblogs.com/giggle/p/9583940.html" target="_blank" rel="noopener">webpack中对于输出文件名可以有三种hash值</a></li></ul><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><ul><li><a href="https://www.cnblogs.com/sunny-sl/p/6529830.html" target="_blank" rel="noopener">HTTP协议【详解】——经典面试题</a></li></ul><h3 id="针对同样的路由，携带了动态参数，-path-a-path-b，解决不刷新的问题"><a href="#针对同样的路由，携带了动态参数，-path-a-path-b，解决不刷新的问题" class="headerlink" title="针对同样的路由，携带了动态参数， /path/a   /path/b，解决不刷新的问题"></a>针对同样的路由，携带了动态参数， /path/a   /path/b，解决不刷新的问题</h3><ul><li>watch中观察$route, handler为请求的方法名，immediate 设置为 true</li><li>beforeRouteUpdate 路由守卫解决</li><li>在 router-view里面新增<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view :key=&quot;$route.fullpath&quot;&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;综合&quot;&gt;&lt;a href=&quot;#综合&quot; class=&quot;headerlink&quot; title=&quot;综合&quot;&gt;&lt;/a&gt;综合&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/TpoKxF4gMi4pSML--W0X2g&quot; targ
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>commonJS和ES6模块化</title>
    <link href="http://yoursite.com/2018/08/30/commonJS%E5%92%8CES6%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>http://yoursite.com/2018/08/30/commonJS和ES6模块化/</id>
    <published>2018-08-30T07:24:33.000Z</published>
    <updated>2018-09-02T13:15:25.795Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>随js语言持续优化，为我们的开发带来较大的便利性。但是在使用node和es6的模块化功能时候，两者的使用方式还是有点区别。在这里做一小结，以便日后查阅</p></blockquote><h2 id="基本的使用规范"><a href="#基本的使用规范" class="headerlink" title="基本的使用规范"></a>基本的使用规范</h2><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><ul><li>主要是Node.js的使用规范，</li><li>每一个js都是一个独立的模块，并且里面的变量名称互不冲突。使用规则为一个模块向外导出变量，另一个模块导入变量</li><li>语法<ol><li>导出的模块：module.exports = ‘变量名’</li><li>导入的模块：var newName = require(‘./导出模块的路径’);</li></ol></li><li>注意使用事项：由于导出的写法不同，因此导入后的使用方式也不通具体如下<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 写法一 --&gt;</span><br><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'Shen Zhen'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`welcome <span class="subst">$&#123;name&#125;</span>, <span class="subst">$&#123;a&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = greet;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import.js</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'Roy'</span>;</span><br><span class="line"><span class="keyword">var</span> method = <span class="built_in">require</span>(<span class="string">'./export.js'</span>);</span><br><span class="line">method(a);  <span class="comment">// 直接将引入的方法调用</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 写法<span class="number">2</span> --&gt;</span><br><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  greet: greet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import.js</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">require</span>(<span class="string">'./export.js'</span>);   <span class="comment">// 此时引入的是个对象，因此需要对对象的调用</span></span><br><span class="line">obj.greet(a);</span><br><span class="line"></span><br><span class="line">&lt;!-- 写法<span class="number">3</span>：不推荐，容易混淆 --&gt;</span><br><span class="line"><span class="comment">// export.js</span></span><br><span class="line">exports.greet = greet;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import.js</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">require</span>(<span class="string">'./export.js'</span>);   <span class="comment">// 此时引入的是个对象，因此需要对对象的调用</span></span><br><span class="line">obj.greet(a);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：在写法2和3中，我们可以看到，两者导出的均为一个对象。实际上在node中，module.exports和exports是同一个变量，并且初始化为一个空对象{}。在这个空对象中，可以存放键值对形式的方法。<strong>但是如果要导出的是数组或者函数，则必须使用module.exports</strong>，实际上，记住一点即可，使用module.exports总是不会错的！</p></blockquote><ul><li>其他：对于引用node的一些内置模块时，可以直接引用其模块名称<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="string">'8080'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h3><ul><li><p>常见的几种写法</p><ol><li><p>直接export导出。es6将其视为一个模块,export分别对外将变量导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="comment">// 也可以写做连续声明变量的形式，去掉第二个export字段，在第一个最后写上','</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> name = <span class="string">'Roy'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, getName&#125; <span class="keyword">from</span> <span class="string">'./export.js'</span></span><br><span class="line">getName();</span><br></pre></td></tr></table></figure></li><li><p>先正常定义，后导出。推荐此方法，清晰明了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'Roy'</span>;</span><br><span class="line"><span class="keyword">let</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import.js</span></span><br><span class="line"><span class="keyword">export</span> &#123;name, getName&#125;; </span><br><span class="line">getName();</span><br></pre></td></tr></table></figure></li><li><p>export导出时候，可以将导出的变量重命名后再导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'Roy'</span>;</span><br><span class="line"><span class="keyword">let</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  name <span class="keyword">as</span> nn,</span><br><span class="line">  getName <span class="keyword">as</span> get</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>import导入的时候，可以将导入的变量重命名 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import.js</span></span><br><span class="line"><span class="comment">// 注意导入的模块名必须和导出时写的变量名一致，同时导入后的模块只读，只能使用，不可再做修改重定义。但是，当且导出的是个对象，导入的js里面可以修改对象的属性，同时也改变了原始处的值。不推荐使用</span></span><br><span class="line"><span class="comment">// 导入时候地址可以相对路径，也可以绝对路径，</span></span><br><span class="line"><span class="comment">// 导入时.js后缀可以省略</span></span><br><span class="line"><span class="keyword">import</span> &#123;getName <span class="keyword">as</span> getMethod&#125; <span class="keyword">from</span> <span class="string">'./export.js'</span></span><br></pre></td></tr></table></figure></li><li><p>设置模块中转站js，匿名转载他处的变量。export2中仅作为中转站，在它里面是无法使用export1.js导出的变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export1.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">'name'</span>, getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// export2.js</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./export1.js'</span>  <span class="comment">// export &#123;name, getName&#125; from './export1.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, getName&#125; <span class="keyword">from</span> <span class="string">'./export2.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="built_in">console</span>.log(getName());</span><br></pre></td></tr></table></figure></li><li><p>终极简化1 -&gt; import整体引入,用<em>替代具体的变量名，同时将其重命名。export </em>命令会忽略export模块的default方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> name = <span class="string">'Roy'</span>, <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> obj <span class="keyword">from</span> <span class="string">'./export.js'</span>;</span><br><span class="line">obj.name;       <span class="comment">// &gt; Roy</span></span><br><span class="line">obj.getName();  <span class="comment">//</span></span><br></pre></td></tr></table></figure></li><li><p>终极简化2 -&gt; export default xxx后，在import时就无需将导入的变量名与导出的保持一致了，用户可以随意命名。实际上export default就是输出了一个叫做default的变量或者方法,然后系统允许在引入它的时候改写为任何名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Roy'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import.js - 注意此处引入时候无需&#123;&#125;</span></span><br><span class="line"><span class="keyword">import</span> nnn <span class="keyword">from</span> <span class="string">'./export.js'</span></span><br></pre></td></tr></table></figure></li><li><p>小结：导出普通变量和函数的小结。注意接口名和内不变量之间要有一一对应关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通变量 - 1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 普通变量 - 2</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;m&#125;;</span><br><span class="line"><span class="comment">// 普通变量 - 3</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;m <span class="keyword">as</span> n&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数 - 1</span></span><br><span class="line">export <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 函数 - 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;getName&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>CommonJS输出的是一个值的拷贝；ES6输出的是值的引用</li><li>CommonJS是模块运行时加载；ES6是编译时完成模块加载，效率更高</li></ul><blockquote><p>参考：</p><ol><li><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434502419592fd80bbb0613a42118ccab9435af408fd000" target="_blank" rel="noopener">廖雪峰-js教程</a></li><li><a href="https://blog.csdn.net/jackTesla/article/details/80796936" target="_blank" rel="noopener">js当中CommonJS 和es6的模块化引入方案以及比较</a></li><li><a href="https://www.cnblogs.com/diligenceday/p/5503777.html" target="_blank" rel="noopener">ES6新特性：使用export和import实现模块化</a></li><li><a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">阮一峰-ES6模块化</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;随js语言持续优化，为我们的开发带来较大的便利性。但是在使用node和es6的模块化功能时候，两者的使用方式还是有点区别。在这里做一小结，以便日后查阅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基本的使用规范&quot;&gt;&lt;a href=&quot;#基
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="模块化" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>git日常命令</title>
    <link href="http://yoursite.com/2018/08/25/git%E6%97%A5%E5%B8%B8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/08/25/git日常命令/</id>
    <published>2018-08-25T09:53:50.000Z</published>
    <updated>2018-09-02T13:13:34.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git提交代码常规"><a href="#Git提交代码常规" class="headerlink" title="Git提交代码常规"></a>Git提交代码常规</h2><h3 id="Git-add的几种区别"><a href="#Git-add的几种区别" class="headerlink" title="Git add的几种区别"></a>Git add的几种区别</h3><ul><li><p>git add .<br>提交被修改(modified)文件和新文件(new)，不包括被删除(deleted)文件</p></li><li><p>git add -u =&gt; git add –update<br>提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)</p></li><li><p>git add -A =&gt; git add –all<br>提交所有变化</p></li></ul><h3 id="git使用说明"><a href="#git使用说明" class="headerlink" title="git使用说明"></a>git使用说明</h3><blockquote><p>场景：新增功能，使用新的分支开发<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. 在github或码云中，新建分支，输入新分支名称,如： index-swiper</span><br><span class="line">2. 打开项目，cd至项目文件根目录</span><br><span class="line">    git pull：拉分支代码至本地</span><br><span class="line">3. 切换新的分支</span><br><span class="line">    git checkout index-swiper</span><br><span class="line">4. 新的分支上开发</span><br><span class="line">5. 提交代码（本地index-swiper =&gt; 远程index-swiper）</span><br><span class="line">    git add -A  提交在本地暂存空间</span><br><span class="line">    git commit -m &apos;本次提交的说明&apos;</span><br><span class="line">    git push    将本地分支代码提交至远程分支</span><br><span class="line">6. 切换至本地的master分支</span><br><span class="line">    git checkout master</span><br><span class="line">7. 将线上的index-swiper分支内容与本地的master合并</span><br><span class="line">    git merge origin/index-swiper</span><br><span class="line">8. 将本地master的代码提交至远程master</span><br><span class="line">    git push</span><br><span class="line">9. 显示git的修改日志</span><br><span class="line">    git log --pretty=oneline</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="删除git远程文件或者文件夹"><a href="#删除git远程文件或者文件夹" class="headerlink" title="删除git远程文件或者文件夹"></a>删除git远程文件或者文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 是否下载指定的分支，否则则是默认的master分支，如果没有设置setting的default分支</span><br><span class="line">git clone git@github.com:RogueSword/RogueSword.github.io.git</span><br><span class="line">git clone -b next git@github.com:RogueSword/RogueSword.github.io.git</span><br><span class="line"></span><br><span class="line">git rm theme/test.txt     // 删除一级目录下的test文件的操作</span><br><span class="line">git rm -r theme              // 删除一级目录下的theme文件夹</span><br></pre></td></tr></table></figure><h3 id="删除本地及远程分支"><a href="#删除本地及远程分支" class="headerlink" title="删除本地及远程分支"></a>删除本地及远程分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 删除远程分支</span><br><span class="line">    git push origin :BranchName</span><br><span class="line">    git push origin -D BranchName</span><br><span class="line">2. 删除本地分支</span><br><span class="line">    git branch -D BranchName</span><br></pre></td></tr></table></figure><h3 id="git的几种撤销-git-push撤销"><a href="#git的几种撤销-git-push撤销" class="headerlink" title="git的几种撤销+git push撤销"></a>git的几种<a href="https://blog.csdn.net/kongbaidepao/article/details/52253774" target="_blank" rel="noopener">撤销</a>+<a href="https://blog.csdn.net/hanchao5272/article/details/79435730" target="_blank" rel="noopener">git push撤销</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1. git add 的撤销</span><br><span class="line">    git status 先看一下add 中的文件 </span><br><span class="line">    git reset HEAD 如果后面什么都不跟的话 就是上一次add 里面的全部撤销了 </span><br><span class="line">    git reset HEAD XXX/XXX/XXX.java 就是对某个文件进行撤销了</span><br><span class="line">2. git commit 的撤销</span><br><span class="line">    git log 查看节点</span><br><span class="line">    git reset commit_id</span><br><span class="line">3. git push的撤销</span><br><span class="line">    git revert HEAD</span><br><span class="line">    git revert HEAD 撤销前一次 commit </span><br><span class="line">    git revert HEAD^ 撤销前前一次 commit</span><br><span class="line"></span><br><span class="line">    // 方法2</span><br><span class="line">    git log    // 查看提交信息，以便找到会退的版本号码</span><br><span class="line">    git reset --soft 版本号  // 保留当前工作区，以便重新提交</span><br><span class="line">              --hard 版本号  // 撤销相应工作区的修改</span><br><span class="line">    git log    // 查看当前的提交信息，确认是否已经回退</span><br><span class="line">    git push origin master –force   // 强制提交当前版本号，以达到撤销版本号的目的。必须添加参数force进行强制提交，否则会提交失败</span><br><span class="line">    // 接着常规操作</span><br><span class="line">    git add .</span><br><span class="line">    git commit -m &apos;xxx&apos;</span><br><span class="line">    git push origin xxx</span><br></pre></td></tr></table></figure><h3 id="git-pull详细示例"><a href="#git-pull详细示例" class="headerlink" title="git pull详细示例"></a>git pull详细示例</h3><ul><li>定义： 从另一个存储库或本地分支获取并集成（整合）。取回远程某个分支的更新，再与本地的指定分支合并</li><li>语法：git pull [options] [<repository>[<refspec>…]]</refspec></repository></li><li>白话：git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">1. 取回远程分支next，并与本地分支master合并</span><br><span class="line">    git pull origin next:master</span><br><span class="line">2. 取回远程分支next，并与本地当前的分支合并</span><br><span class="line">    git pull origin next</span><br><span class="line">2.1 拓展实质</span><br><span class="line">    上述表示取回origin/next分支，再与当前分支合并。实质上等同于先做git fetch, 再执行git merge</span><br><span class="line">    git fetch origin</span><br><span class="line">    git merge origin/next</span><br><span class="line"></span><br><span class="line">3. 拓展：在git中，git会自动在本地分支和远程分支之间，建立一种追踪关系。比如，git clone的时候，所有本地的分支默认与远程主机的同名分支，建立追踪关系，即本地master分支，自动追踪远程origin/master分支</span><br><span class="line">3.1 当然也可以手动建立追踪关系。指定本地master分支追踪远程origin/next分支</span><br><span class="line">    git branch --set-upstream master origin/next</span><br><span class="line">3.2 如果当前分支与远程分支存在追踪关系，git pull可以省略远程分支名</span><br><span class="line">    git pull origin</span><br><span class="line">3.3 如果当前分支只有一个追踪分支，可以省略主机名</span><br><span class="line">    git pull</span><br></pre></td></tr></table></figure><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><h3 id="git初始化五连"><a href="#git初始化五连" class="headerlink" title="git初始化五连"></a>git初始化五连</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init (初始化本地仓库)</span><br><span class="line">git add .  （将本地所有文件加到仓库里）</span><br><span class="line">git commit -m &quot;message&quot; （设置提交信息）</span><br><span class="line">git remote add origin git@github.com:sunningcarryhaha/flexSupplement.git（本地仓库链接远程仓库）</span><br><span class="line"></span><br><span class="line">git push -u origin master （push文件到仓库中）</span><br><span class="line">git push --set-upstream origin master</span><br></pre></td></tr></table></figure><h2 id="其他易错点"><a href="#其他易错点" class="headerlink" title="其他易错点"></a>其他易错点</h2><h3 id="git-pull-和-git-merge的区别"><a href="#git-pull-和-git-merge的区别" class="headerlink" title="git pull 和 git merge的区别"></a>git pull 和 git merge的区别</h3><ul><li>git fetch 是指从远程获取最新版本到本地，不会自动合并</li><li>在实际使用中，git fetch更安全一些，因为在merge前，我们可以查看更新情况，然后再决定是否合并。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例-写法1：</span><br><span class="line">git fetch origin master             // 远程分支取回</span><br><span class="line">git log -p master..origin/master    // 对比本地master与远程master区别</span><br><span class="line">git merge origin/master             // 将fetch放在存储库里的内容与本地工作区合并</span><br></pre></td></tr></table></figure><script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js" type="text/javascript"></script><h3 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. git branch -r    // 查看当前远程分支</span><br><span class="line">2. git branch -a    // 查看所有分支，远程及本地</span><br></pre></td></tr></table></figure><h3 id="创建-gitignore文件，忽略git不必要提交文件"><a href="#创建-gitignore文件，忽略git不必要提交文件" class="headerlink" title="创建.gitignore文件，忽略git不必要提交文件"></a>创建.gitignore文件，忽略git不必要提交文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">touch .gitignore    // 创建.gitignore文件</span><br><span class="line">// 在文件录入：</span><br><span class="line">.deploy_git/</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br></pre></td></tr></table></figure><blockquote><p>参考：</p><ol><li><a href="https://blog.csdn.net/superxlcr/article/details/51354257" target="_blank" rel="noopener">Git-SSH文章链接</a></li><li><a href="https://www.yiibai.com/git/git_pull.html" target="_blank" rel="noopener">Git命令详解</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git提交代码常规&quot;&gt;&lt;a href=&quot;#Git提交代码常规&quot; class=&quot;headerlink&quot; title=&quot;Git提交代码常规&quot;&gt;&lt;/a&gt;Git提交代码常规&lt;/h2&gt;&lt;h3 id=&quot;Git-add的几种区别&quot;&gt;&lt;a href=&quot;#Git-add的几种区别&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>读书笔记《你不知道的Javascript》</title>
    <link href="http://yoursite.com/2018/08/25/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%8A%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Javascript%E3%80%8B(%E4%B8%8A)/"/>
    <id>http://yoursite.com/2018/08/25/读书笔记《你不知道的Javascript》(上)/</id>
    <published>2018-08-25T07:38:31.000Z</published>
    <updated>2018-09-02T13:13:34.871Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p8sur5u78.bkt.clouddn.com/s28033372.jpg" alt=""></p><blockquote><p>去年的某时在群内听闻此书名，不以为然。想来也是和普通的书本无异，这段日子又在GitHub上面看到了开源文档，star数目不小。下载下来电子版，看了一小节原型链，不禁耳目一新，真可谓打通任督二脉。话不多说，立马当当下单开啃。在此记录下学习笔记，以供日后回读。</p></blockquote><h2 id="语法新特性"><a href="#语法新特性" class="headerlink" title="语法新特性"></a>语法新特性</h2><h3 id="Number-EPSILON（ES6）-可接受的误差范围"><a href="#Number-EPSILON（ES6）-可接受的误差范围" class="headerlink" title="Number.EPSILON（ES6） - 可接受的误差范围"></a>Number.EPSILON（ES6） - 可接受的误差范围</h3><p>Number.EPSILON是ES新特性，表示1和大于1的最小浮点数的差值，值为Math.pow(2, -52);可以用作测试值是否相等</p><blockquote><p>实例：验证0.1 + 0.2 = 0.3。</p></blockquote><ul><li><p>说明：鉴于js遵循IEEE754规范，属于二进制浮点数的最大问题，就是0.1和0.2不够准确，相加之后会得到一个很接近的一个数字0.30000000000000004，因此判断会得到false</p></li><li><p>解决：设置误差范围，即计算结果在误差范围内即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">0.3</span>;</span><br><span class="line"><span class="keyword">var</span> isEqual = (a + b -c) &lt; <span class="built_in">Number</span>.EPSISON;</span><br></pre></td></tr></table></figure></li><li><p>ES5 - polyfill</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Number</span>.EPSILON) &#123;</span><br><span class="line">  <span class="built_in">Number</span>.EPSILON = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-52</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="体系缺漏"><a href="#体系缺漏" class="headerlink" title="体系缺漏"></a>体系缺漏</h2><h3 id="显示与隐式类型转换"><a href="#显示与隐式类型转换" class="headerlink" title="显示与隐式类型转换"></a>显示与隐式类型转换</h3><p>显示：String(…), Number(…), Booolean(…)这种不带new的是显示类型转换；一元运算符：+XX 和 !XX 也是显式转换（注意：!XX不仅转类型，且将其值的布尔类型值反转，因此 !!XX 是合理的显示）<br>隐式： </p><h2 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h2><h3 id="和Math-floor"><a href="#和Math-floor" class="headerlink" title="~~和Math.floor()"></a>~~和Math.floor()</h3><p>注意点：正数时候结果相同；但是负数时候则不同<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正数</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">9.9</span>);     <span class="comment">// &gt; 9</span></span><br><span class="line">~~<span class="number">9.9</span>                <span class="comment">// &gt; 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 负数</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">-9.9</span>);    <span class="comment">// &gt; -10</span></span><br><span class="line">~~<span class="number">-9.9</span>               <span class="comment">// -9</span></span><br></pre></td></tr></table></figure></p><p>###　<a href="https://blog.csdn.net/pika_lzy/article/details/79212476" target="_blank" rel="noopener">关于JSON.stringify()使用的注意事项</a></p><h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h3><p>语法：parseInt(string[, radix])，如果没有第二个参数，默认为10。<strong>同时如果第一个参数不是字符串，则会将其转为字符串再做操作</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="number">42</span>));   <span class="comment">// &gt; 42, 将String对象拆封再将数字转为字符串，再做处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例2</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    num: <span class="number">2</span>,</span><br><span class="line">    toString () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">String</span>(<span class="keyword">this</span>.num * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">parseInt</span>(a);    <span class="comment">// &gt; 4</span></span><br></pre></td></tr></table></figure></p><h3 id="和-TODO-《中》-5-1-3"><a href="#和-TODO-《中》-5-1-3" class="headerlink" title="[] + {}和{} + [] TODO: 《中》 5.1.3"></a>[] + {}和{} + [] TODO: 《中》 5.1.3</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[] + &#123;&#125;   <span class="comment">// &gt; [object object]</span></span><br><span class="line">&#123;&#125; + []   <span class="comment">// &gt; 0</span></span><br></pre></td></tr></table></figure><h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><h3 id="和indexOf检查字段存在性"><a href="#和indexOf检查字段存在性" class="headerlink" title="~和indexOf检查字段存在性"></a>~和indexOf检查字段存在性</h3><ul><li>~a按位非运算符: ~x 等同于 -(x+1)</li><li>indexOf语法： stringObject.indexOf(searchvalue[,fromindex])，如果没有第二个参数，则从0开始检测searchValue出现的位置(从0开始)，如未找到，则返回-1</li></ul><blockquote><p>通常我们在检测字段时使用 &gt;= 0 和 == -1 做判断，这样的写法不是很好，称为’抽象渗透’，意思是在代码中暴漏了底层的实现细节(见书本p61)</p></blockquote><ul><li>解决：~(str.indexOf(target))作为判断的代码片段，当未检测到即返回的结果是-1时，~-1的结果为0，隐式转为布尔型，判断结果同为false<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="keyword">var</span> target = <span class="string">'roy'</span>;</span><br><span class="line"><span class="keyword">if</span> (~str.indexOf(target)) &#123;    <span class="comment">// false</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'find it'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://p8sur5u78.bkt.clouddn.com/s28033372.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;去年的某时在群内听闻此书名，不以为然。想来也是和普通的书本无异，这段日子又在GitHub上面看到了开源
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Frist Page</title>
    <link href="http://yoursite.com/2018/05/18/Frist%20Page/"/>
    <id>http://yoursite.com/2018/05/18/Frist Page/</id>
    <published>2018-05-18T09:14:06.000Z</published>
    <updated>2018-09-02T13:13:34.870Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><p>more</p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
